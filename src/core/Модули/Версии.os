#Использовать logos

Перем Лог;

// Выполняет чтение версии из файла
//
// Параметры:
//   ПутьКФайлуВерсии - Строка - путь к файлу с версией
//
// Возвращаемое значение:
//   Версия - класс версия
Функция ВерсияИзФайла(Знач ПутьКФайлуВерсии) Экспорт
	
	ФайлВерсии = Новый Файл(ПутьКФайлуВерсии); 

	Если Не ФайлВерсии.Существует() Тогда
		ВызватьИсключение СтрШаблон("Переданный файл <%1> для чтения версии не существует", ПутьКФайлуВерсии)
	КонецЕсли;

	Чтение = Новый ЧтениеТекста(ПутьКФайлуВерсии, КодировкаТекста.UTF8);
	РезультатЧтения  = Чтение.Прочитать();
	Чтение.Закрыть();
	
	Возврат ВерсияИзСтроки(РезультатЧтения);

КонецФункции

// Возвращает максимальную версию из массива версией
//
// Параметры:
//   МассивВерсий - Массив - Элементы массива - класс версия
//
// Возвращаемое значение:
//   Версия - класс версия
Функция МаксимальнаяИзМассива(Знач МассивВерсий) Экспорт
	
	Если МассивВерсий.Количество() = 0 Тогда
		Возврат Новый Версия("0.0.0");
	КонецЕсли;
	
	Если МассивВерсий.Количество() = 1 Тогда
		Возврат МассивВерсий[0];
	КонецЕсли;

	Лог.Отладка("Выбираю максимум из [%1]", МассивВерсий.Количество());
	
	ТекущийМаксимум = МассивВерсий[0];
	Для Сч = 1 По МассивВерсий.ВГраница() Цикл
		Если МассивВерсий[Сч].Больше(ТекущийМаксимум) Тогда
			ТекущийМаксимум = МассивВерсий[Сч];
		КонецЕсли;
	КонецЦикла;

	Возврат ТекущийМаксимум;

КонецФункции

// Выполняет проверки версии на соответствие диапазону
//
// Параметры:
//   ПроверяемаяВерсия - Строка/Класс Версия - проверяемая версия 
//   СтрокаДиапазон - Строка - Строковое представление диапазона
//
// Возвращаемое значение:
//   булево - Истина, если версия в диапазоне.
Функция ВерсияВДиапазоне(Знач ПроверяемаяВерсия, Знач СтрокаДиапазон) Экспорт

	Возврат Сравнение(СтрокаДиапазон)
			.ПроверяемаяВерсия(ПроверяемаяВерсия)
			.ВДиапазоне();

КонецФункции

// Создает и возвращает сравнение версий
//
// Параметры:
//   СтрокаДиапазон - Строка - Строковое представление начального диапазона (Необязательно)
//
// Возвращаемое значение:
//   СравнениеВерсий - класс СравнениеВерсий
Функция Сравнение(Знач СтрокаДиапазон = "*") Экспорт
	Возврат Новый СравнениеВерсий(СтрокаДиапазон);
КонецФункции

// Преобразовывает массив строк версий в массив версий
//
// Параметры:
//   МассивСтрокВерсий - Массив - элементы строка, типа "1.0.0"
//
// Возвращаемое значение:
//   МассивВерсий - массив -  элементы класс Версия
Функция СтрокиВерсийВМассив(Знач МассивСтрокВерсий) Экспорт
	
	МассивВерсий = Новый Массив;

	Для каждого Строка Из МассивСтрокВерсий Цикл
		
		МассивВерсий.Добавить(ВерсияИзСтроки(Строка));

	КонецЦикла;

	Возврат МассивВерсий;

КонецФункции

// Возвращает максимальную версию в соответствии диапазонами
//
// Параметры:
//   МассивСтрокВерсий - Массив - элементы строка, типа "1.0.0"
//   ДиапазонСнизу - Строка - Строковое представление диапазона
//   ДиапазонСверху - Строка - Строковое представление диапазона (необязательно)
//
// Возвращаемое значение:
//   Версия - класс версия
Функция МаксимальнаяВерсияМежду(Знач МассивСтрокВерсий, ДиапазонСнизу, ДиапазонСверху = "*") Экспорт

	Возврат Сравнение(ДиапазонСнизу)
			.ДобавитьДиапазон(ДиапазонСверху)
			.ПроверяемыеВерсии(МассивСтрокВерсий)
			.Максимальная();

КонецФункции

// Возвращает версию из строки
//
// Параметры:
//   СтрокаВерсии - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Версия - класс версия
Функция ВерсияИзСтроки(Знач СтрокаВерсии) Экспорт
	
	Если Тип("Строка") = ТипЗнч(СтрокаВерсии) Тогда
		Возврат ПрочитатьВерсию(СтрокаВерсии);
	ИначеЕсли Тип("Версия") = ТипЗнч(СтрокаВерсии) Тогда
		Возврат СтрокаВерсии;
	КонецЕсли;

КонецФункции

// Выполняет сравнение версий
//
// Параметры:
//   СтрокаВерсия1 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//   СтрокаВерсия2 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Число - результат сравнения в числе (0 = Равны, -1 = Меньше, 1 = Больше), относительно первой версии (СтрокаВерсия1)
// Пример, 
//  (-1) - СтрокаВерсия1 меньше (<) СтрокаВерсия2
//  (1) - СтрокаВерсия1 больше (>) СтрокаВерсия2
//  (0) - СтрокаВерсия1 равна (=) СтрокаВерсия2
Функция СравнитьВерсии(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт

	Версия1 = ВерсияИзСтроки(СтрокаВерсия1);
	Версия2 = ВерсияИзСтроки(СтрокаВерсия2);
	
	Возврат Версия1.Сравнить(Версия2);
	
КонецФункции

// Проверяет равенство версии
//
// Параметры:
//   СтрокаВерсия1 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//   СтрокаВерсия2 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Булево - истина / ложь
Функция ВерсииРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = 0;
КонецФункции

// Проверяет не равенство версии
//
// Параметры:
//   СтрокаВерсия1 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//   СтрокаВерсия2 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Булево - истина / ложь
Функция ВерсииНеРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат НЕ СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = 0;
КонецФункции

// Проверяет, что Версия1 меньше Версия2
//
// Параметры:
//   СтрокаВерсия1 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//   СтрокаВерсия2 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Булево - истина / ложь
Функция ВерсияМеньше(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = -1;
КонецФункции

// Проверяет, что Версия1 меньше или равна Версия2
//
// Параметры:
//   СтрокаВерсия1 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//   СтрокаВерсия2 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Булево - истина / ложь
Функция ВерсияМеньшеИлиРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) <= 0;
КонецФункции

// Проверяет, что Версия1 больше Версия2
//
// Параметры:
//   СтрокаВерсия1 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//   СтрокаВерсия2 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Булево - истина / ложь
Функция ВерсияБольше(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = 1;
КонецФункции

// Проверяет, что Версия1 больше или равна Версия2
//
// Параметры:
//   СтрокаВерсия1 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//   СтрокаВерсия2 - Строка/Класс Версия - Строковое представление версии типа "1.0.0"
//
// Возвращаемое значение:
//   Булево - истина / ложь
Функция ВерсияБольшеИлиРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) >= 0;
КонецФункции

// Сортирует массив версий (возр или убыв)
// 
// Параметры:
//	ВходящиеДанные - массив данных с типом Версия / Строковое представление версии
// 	ПорядокСортировки - строка, принимает значение "ВОЗР" или "УБЫВ"
Процедура СортироватьВерсии(ВходящиеДанные, ПорядокСортировки = "ВОЗР") Экспорт

	Массив = ВходящиеДанные;

	КоличествоЭлементовВМассиве = Массив.Количество();
	Если КоличествоЭлементовВМассиве > 0 Тогда
		БыстраяСортировка(Массив, 0, КоличествоЭлементовВМассиве - 1, ПорядокСортировки);
	КонецЕсли;

	ВходящиеДанные = Массив;
	
КонецПроцедуры

Процедура БыстраяСортировка(МассивДанных, ЛевоеЗначение, ПравоеЗначение, Знач ПорядокСортировки = "ВОЗР")
	
	ПорядокСортировки = вРег(ПорядокСортировки);
	
	ЛевоеЗначениеФиксированное = ЛевоеЗначение; //левая граница
	ПравоеЗначениеФиксированное = ПравоеЗначение; // правая граница
	ОпорноеЗначение = МассивДанных[ЛевоеЗначение]; // значение опоры
	
	// пока границы не сомкнутся
	Пока ЛевоеЗначение < ПравоеЗначение Цикл 
		
		// двигаем правую границу до значения, больше(меньше) опорного
		Пока ?(ПорядокСортировки = "ВОЗР", 
			ВерсияБольшеИлиРавны(МассивДанных[ПравоеЗначение], ОпорноеЗначение),
			ВерсияМеньшеИлиРавны(МассивДанных[ПравоеЗначение], ОпорноеЗначение)) И ЛевоеЗначение < ПравоеЗначение Цикл
			
			ПравоеЗначение = ПравоеЗначение - 1;
			
		КонецЦикла;
		
		Если ЛевоеЗначение <> ПравоеЗначение Тогда // если границы не сомкнулись
			МассивДанных[ЛевоеЗначение] = МассивДанных[ПравоеЗначение]; // перемещаем правое на левое
			ЛевоеЗначение = ЛевоеЗначение + 1; // сдвигаем вправо
		КонецЕсли;
		
		// двигаем левую границу до значения, меньше(больше) опорного
		Пока ?(ПорядокСортировки = "ВОЗР", 
		 	ВерсияМеньшеИлиРавны(МассивДанных[ЛевоеЗначение], ОпорноеЗначение),
			ВерсияБольшеИлиРавны(МассивДанных[ЛевоеЗначение], ОпорноеЗначение)) И ЛевоеЗначение < ПравоеЗначение Цикл
			
			ЛевоеЗначение = ЛевоеЗначение + 1;
			
		КонецЦикла;
		
		// если границы не сомкнулись
		Если ЛевоеЗначение <> ПравоеЗначение Тогда 
			МассивДанных[ПравоеЗначение] = МассивДанных[ЛевоеЗначение]; // перемещаем левое на правое
			ПравоеЗначение = ПравоеЗначение - 1; // сдвигаем вправо 
		КонецЕсли;
		
	КонецЦикла;
	
	// фиксируем
	МассивДанных[ЛевоеЗначение] = ОпорноеЗначение;
	ОпорноеЗначение = ЛевоеЗначение;
	ЛевоеЗначение = ЛевоеЗначениеФиксированное;
	ПравоеЗначение = ПравоеЗначениеФиксированное;
	
	// рекурсивно сортируем две части массива
	Если ЛевоеЗначение < ОпорноеЗначение Тогда 
		БыстраяСортировка(МассивДанных, ЛевоеЗначение, ОпорноеЗначение - 1, ПорядокСортировки);
	КонецЕсли;
	Если ПравоеЗначение > ОпорноеЗначение Тогда
		БыстраяСортировка(МассивДанных, ОпорноеЗначение + 1, ПравоеЗначение, ПорядокСортировки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьВерсию(Знач СтрокаВерсии)
	
	КлассВерсия = Новый Версия(СтрокаВерсии);

	Если КлассВерсия.Ошибка() Тогда
		ВызватьИсключение КлассВерсия.ПолучитьОписаниеОшибки();
	КонецЕсли;

	Возврат КлассВерсия;

КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.semver.versions");
